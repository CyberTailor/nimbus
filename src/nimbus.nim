# SPDX-FileCopyrightText: 2022 Anna <cyber@sysrq.in>
# SPDX-License-Identifier: BSD-3-Clause

import os, sequtils, strtabs, strutils

import nimbs/common, nimbs/dependencyresolver, nimbs/installerscript,
       nimbs/ninjasyntax, nimbs/options, nimbs/packageinfo, nimbs/version

proc processDependencies(requires: seq[string], options: Options): seq[string] =
  for req in requires:
    let dep = parseRequires(req)
    case dep.name
    of "nim":
      let nimVer = getNimVersion(options)
      if not withinRange(nimVer, dep.ver):
        raise unsatisfiedDependencyError("Unsatisfied Nim dependency")
    else:
      result.add(dep.getPath(options))

proc application(ninja: File, input, output: string, paths: seq[string]) =
  var vars = newStringTable()
  if paths.len != 0:
    vars["paths"] = "-p:" & paths.join(" -p:")

  ninja.build(@[output],
    rule = "nimc",
    inputs = @[input],
    implicit = @["PHONY"], # FIXME: add depfile support to the Nim compiler
    variables = vars
  )

proc setup(options: Options) =
  echo "The nimbus build system"
  echo "Version: " & nimbusVersion
  echo "Source dir: " & options.getSourceDir()
  echo "Build dir: " & options.getBuildDir()

  let pkgInfo = initPackageInfo(options)
  echo "Project name: " & pkgInfo.name
  echo "Project version: " & pkgInfo.version
  echo "Nim compiler: " & options.getNimBin()
  echo ""

  let depPaths = processDependencies(pkgInfo.requires, options)

  echo "-- Generating installer script"
  let installer = open(options.getBuildDir() / installerFileName, fmWrite)
  installer.writeInstallerScript(pkgInfo, options)
  installer.close()

  echo "-- Generating build.ninja"
  let ninja = open(options.getBuildDir() / "build.ninja", fmWrite)

  ninja.comment("This file is autogenerated by the nimbus build system.")
  ninja.comment("Do not edit by hand.")
  ninja.newline()

  ninja.variable("nim", options.getNimBin())
  ninja.variable("nimflags", options.getNimFlags())
  ninja.variable("nimbus", getAppFilename())
  ninja.variable("sourcedir", options.getSourceDir())
  ninja.variable("builddir", options.getBuildDir())
  ninja.variable("bindir", options.getBinDir())
  ninja.variable("nimbledir", options.getNimbleDir())
  ninja.newline()

  ninja.rule("REGENERATE_BUILD",
    command = "$nimbus --binDir:$bindir --nimbleDir:$nimbledir --nim:$nim " &
              "$nimflags $sourcedir $builddir",
    description = "Regenerating build files.",
    pool = "console",
    generator = true)
  ninja.newline()

  ninja.rule("nimscript",
    command = "$nim --hints:off e $in",
    description = "Executing NimScript file $in",
    pool = "console")
  ninja.newline()

  if pkgInfo.bin.len != 0:
    ninja.rule("nimc",
      command = "$nim --hints:off $nimflags c -o:$out $paths $in",
      description = "Compiling Nim application $out")
    ninja.newline()

  ninja.comment("Phony build target, always out of date")
  ninja.build(@["PHONY"], rule = "phony")
  ninja.newline()

  ninja.build(@["build.ninja"],
    rule = "REGENERATE_BUILD",
    inputs = @[pkgInfo.nimbleFile])
  ninja.newline()

  ninja.build(@["reconfigure"],
    rule = "REGENERATE_BUILD",
    implicit = @["PHONY"])
  ninja.newline()

  for bin in pkgInfo.bin:
    let output = bin.addFileExt(ExeExt)
    let input = pkgInfo.getSourceDir(options) / bin.addFileExt("nim")
    ninja.application(input, output, depPaths)
    ninja.newline()

  ninja.build(@["all"],
    rule = "phony",
    inputs = map(pkgInfo.bin,
                 proc(bin: string): string = bin.addFileExt(ExeExt)))
  ninja.default(@["all"])
  ninja.newline()

  ninja.build(@["install"],
    rule = "nimscript",
    inputs = @[installerFileName],
    implicit = @["PHONY", "all"])
  ninja.close()

when isMainModule:
  var opt = parseCmdLine()
  if opt.showHelp:
    writeHelp() # quits
  opt.setLogger
  opt.setSourceDir
  opt.setBuildDir
  opt.setNimBin
  opt.setNimbleDir
  opt.setBinDir
  opt.setup()
